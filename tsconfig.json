{
  "compilerOptions": {
    /* このファイルについての詳細は https://aka.ms/tsconfig を参照してください */

    /* プロジェクト */
    // "incremental": true,                              /* プロジェクトのインクリメンタルコンパイルを可能にするために、.tsbuildinfo ファイルを保存します。 */
    // "composite": true,                                /* プロジェクト参照を使用するための制約を有効にします。 */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* .tsbuildinfo インクリメンタルコンパイルファイルのパスを指定します。 */
    // "disableSourceOfProjectReferenceRedirect": true,  /* コンポジットプロジェクトを参照する際に宣言ファイルではなくソースファイルを優先することを無効にします。 */
    // "disableSolutionSearching": true,                 /* 編集時にマルチプロジェクト参照チェックからプロジェクトをオプトアウトします。 */
    // "disableReferencedProjectLoad": true,             /* TypeScriptによって自動的にロードされるプロジェクトの数を減らします。 */

    /* 言語と環境 */
    "target": "ES2020" /* 発行されるJavaScriptの言語バージョンを設定し、互換性のあるライブラリ宣言を含めます。 */,
    // "lib": [],                                        /* ターゲットランタイム環境を記述する一連のバンドルされたライブラリ宣言ファイルを指定します。 */
    // "jsx": "preserve",                                /* 生成されるJSXコードを指定します。 */
    // "experimentalDecorators": true,                   /* 実験的なデコレーターのサポートを有効にします。 */
    // "emitDecoratorMetadata": true,                    /* ソースファイルの装飾された宣言に対してデザインタイプのメタデータを発行します。 */
    // "jsxFactory": "",                                 /* React JSXエミットを対象とする場合に使用されるJSXファクトリ関数を指定します。例: 'React.createElement' や 'h'。 */
    // "jsxFragmentFactory": "",                         /* React JSXエミットを対象とする場合にフラグメント用に使用されるJSXフラグメント参照を指定します。例: 'React.Fragment' や 'Fragment'。 */
    // "jsxImportSource": "",                            /* 'jsx: react-jsx*'を使用する際にJSXファクトリ関数をインポートするために使用されるモジュール指定子を指定します。 */
    // "reactNamespace": "",                             /* 'createElement'が呼び出されるオブジェクトを指定します。これは'react' JSXエミットを対象とする場合にのみ適用されます。 */
    // "noLib": true,                                    /* デフォルトのlib.d.tsを含む、任意のライブラリファイルの含めることを無効にします。 */
    // "useDefineForClassFields": true,                  /* ECMAScript標準に準拠したクラスフィールドを発行します。 */
    // "moduleDetection": "auto",                        /* モジュール形式のJSファイルを検出する方法を制御します。 */

    /* モジュール */
    "module": "CommonJS" /* 生成されるモジュールコードを指定します。 */,
    // "rootDir": "./",                                  /* ソースファイル内のルートフォルダを指定します。 */
    // "moduleResolution": "node10",                     /* TypeScriptが与えられたモジュール指定子からファイルを検索する方法を指定します。 */
    // "baseUrl": "./",                                  /* 非相対モジュール名を解決するための基本ディレクトリを指定します。 */
    // "paths": {},                                      /* インポートを追加の検索場所に再マップする一連のエントリを指定します。 */
    // "rootDirs": [],                                   /* モジュールを解決する際に複数のフォルダを1つとして扱うことを許可します。 */
    // "typeRoots": [],                                  /* './node_modules/@types'のように機能する複数のフォルダを指定します。 */
    // "types": [],                                      /* ソースファイルで参照されていない型パッケージ名を指定して含めます。 */
    // "allowUmdGlobalAccess": true,                     /* モジュールからUMDグローバルにアクセスを許可します。 */
    // "moduleSuffixes": [],                             /* モジュールを解決する際に検索するファイル名の接尾辞のリスト。 */
    // "allowImportingTsExtensions": true,               /* TypeScriptファイル拡張子を含むインポートを許可します。'--moduleResolution bundler'と'--noEmit'または'--emitDeclarationOnly'が設定されている必要があります。 */
    // "resolvePackageJsonExports": true,                /* パッケージインポートを解決する際にpackage.jsonの'exports'フィールドを使用します。 */
    // "resolvePackageJsonImports": true,                /* インポートを解決する際にpackage.jsonの'imports'フィールドを使用します。 */
    // "customConditions": [],                           /* インポートを解決する際にリゾルバ固有のデフォルトに加えて設定する条件。 */
    // "resolveJsonModule": true,                        /* .jsonファイルのインポートを有効にします。 */
    // "allowArbitraryExtensions": true,                 /* 宣言ファイルが存在する場合に任意の拡張子のファイルをインポートすることを許可します。 */
    // "noResolve": true,                                /* 'import'、'require'、または'<reference>'がプロジェクトに追加すべきファイルの数を拡大することを禁止します。 */

    /* JavaScriptのサポート */
    // "allowJs": true,                                  /* JavaScriptファイルをプログラムの一部として許可します。これらのファイルからエラーを取得するには'checkJS'オプションを使用します。 */
    // "checkJs": true,                                  /* 型チェックされたJavaScriptファイルでのエラーレポートを有効にします。 */
    // "maxNodeModuleJsDepth": 1,                        /* 'node_modules'からのJavaScriptファイルをチェックするために使用される最大フォルダ深度を指定します。'allowJs'と共にのみ適用されます。 */

    /* 発行 */
    // "declaration": true,                              /* プロジェクト内のTypeScriptおよびJavaScriptファイルから.d.tsファイルを生成します。 */
    // "declarationMap": true,                           /* d.tsファイルのソースマップを作成します。 */
    // "emitDeclarationOnly": true,                      /* JavaScriptファイルではなくd.tsファイルのみを出力します。 */
    // "sourceMap": true,                                /* 発行されたJavaScriptファイルのソースマップファイルを作成します。 */
    // "inlineSourceMap": true,                          /* 発行されたJavaScript内にソースマップファイルを含めます。 */
    // "outFile": "./",                                  /* すべての出力を1つのJavaScriptファイルにバンドルするファイルを指定します。'declaration'がtrueの場合、すべての.d.ts出力をバンドルするファイルも指定します。 */
    "outDir": "./dist" /* すべての発行されたファイルの出力フォルダを指定します。 */,
    // "removeComments": true,                           /* コメントの発行を無効にします。 */
    // "noEmit": true,                                   /* コンパイルからファイルの発行を無効にします。 */
    // "importHelpers": true,                            /* ヘルパー関数をファイルごとではなくプロジェクトごとにtslibからインポートすることを許可します。 */
    // "importsNotUsedAsValues": "remove",               /* 型にのみ使用されるインポートの発行/チェック動作を指定します。 */
    // "downlevelIteration": true,                       /* 反復に対してより準拠しているが、冗長でパフォーマンスが低下するJavaScriptを発行します。 */
    // "sourceRoot": "",                                 /* デバッガが参照ソースコードを見つけるためのルートパスを指定します。 */
    // "mapRoot": "",                                    /* デバッガが生成された場所ではなくマップファイルを検索する場所を指定します。 */
    // "inlineSources": true,                            /* 発行されたJavaScript内のソースマップにソースコードを含めます。 */
    // "emitBOM": true,                                  /* 出力ファイルの先頭にUTF-8バイトオーダーマーク(BOM)を発行します。 */
    // "newLine": "crlf",                                /* ファイルを発行する際の改行文字を設定します。 */
    // "stripInternal": true,                            /* JSDocコメントに'@internal'が含まれている宣言の発行を無効にします。 */
    // "noEmitHelpers": true,                            /* '__extends'のようなカスタムヘルパー関数をコンパイルされた出力に生成しないようにします。 */
    // "noEmitOnError": true,                            /* 型チェックエラーが報告された場合にファイルの発行を無効にします。 */
    // "preserveConstEnums": true,                       /* 生成されたコードで'const enum'宣言を消去しないようにします。 */
    // "declarationDir": "./",                           /* 生成された宣言ファイルの出力ディレクトリを指定します。 */
    // "preserveValueImports": true,                     /* それ以外の場合は削除されるJavaScript出力内で未使用のインポート値を保持します。 */

    /* 相互運用性の制約 */
    // "isolatedModules": true,                          /* 他のインポートに依存せずに安全にトランスパイルできることを保証します。 */
    // "verbatimModuleSyntax": true,                     /* 型のみとしてマークされていない任意のインポートやエクスポートを変換または省略せずに、'module'設定に基づいて出力ファイルの形式で書き込まれるようにします。 */
    // "allowSyntheticDefaultImports": true,             /* モジュールがデフォルトエクスポートを持たない場合に'import x from y'を許可します。 */
    "esModuleInterop": true /* CommonJSモジュールのインポートをサポートするために追加のJavaScriptを発行します。これにより、型の互換性のために'allowSyntheticDefaultImports'が有効になります。 */,
    // "preserveSymlinks": true,                         /* シンボリックリンクを実際のパスに解決しないようにします。これはnodeの同じフラグに対応します。 */
    "forceConsistentCasingInFileNames": true /* インポートにおける大文字と小文字の一貫性を保証します。 */,

    /* 型チェック */
    "strict": true /* すべての厳格な型チェックオプションを有効にします。 */,
    // "noImplicitAny": true,                            /* 暗黙の'any'型を持つ式や宣言に対するエラーレポートを有効にします。 */
    // "strictNullChecks": true,                         /* 型チェック時に'null'と'undefined'を考慮に入れます。 */
    // "strictFunctionTypes": true,                      /* 関数を割り当てる際に、パラメータと戻り値がサブタイプ互換性を持つことを確認します。 */
    // "strictBindCallApply": true,                      /* 'bind'、'call'、および'apply'メソッドの引数が元の関数と一致することを確認します。 */
    // "strictPropertyInitialization": true,             /* コンストラクタで設定されていない宣言されたクラスプロパティのチェックを有効にします。 */
    // "noImplicitThis": true,                           /* 'this'が'type'として与えられた場合にエラーレポートを有効にします。 */
    // "useUnknownInCatchVariables": true,               /* デフォルトのcatch節変数を'any'ではなく'unknown'として扱います。 */
    // "alwaysStrict": true,                             /* 常に'use strict'を発行します。 */
    // "noUnusedLocals": true,                           /* ローカル変数が読み取られない場合にエラーレポートを有効にします。 */
    // "noUnusedParameters": true,                       /* 関数パラメータが読み取られない場合にエラーを発生させます。 */
    // "exactOptionalPropertyTypes": true,               /* オプショナルプロパティタイプを記述された通りに解釈し、'undefined'を追加しません。 */
    // "noImplicitReturns": true,                        /* 関数内で明示的に戻り値を返さないコードパスに対するエラーレポートを有効にします。 */
    // "noFallthroughCasesInSwitch": true,               /* switch文のフォールスルーケースに対するエラーレポートを有効にします。 */
    // "noUncheckedIndexedAccess": true,                 /* インデックスを使用してアクセスする際に型に'undefined'を追加します。 */
    // "noImplicitOverride": true,                       /* 派生クラスでオーバーライドされるメンバーがオーバーライド修飾子でマークされていることを確認します。 */
    // "noPropertyAccessFromIndexSignature": true,       /* インデックス型で宣言されたキーに対してインデックスアクセサを使用することを強制します。 */
    // "allowUnusedLabels": true,                        /* 未使用のラベルに対するエラーレポートを無効にします。 */
    // "allowUnreachableCode": true,                     /* 到達不可能なコードに対するエラーレポートを無効にします。 */

    /* 完全性 */
    // "skipDefaultLibCheck": true,                      /* TypeScriptに含まれる.d.tsファイルの型チェックをスキップします。 */
    "skipLibCheck": true /* すべての.d.tsファイルの型チェックをスキップします。 */
  }
}
